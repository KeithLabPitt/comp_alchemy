cd slab/2x2/Pt-slab-2x2
/var/spool/slurmd/job19802/slurm_script: line 9: cd: slab/2x2/Pt-slab-2x2: No such file or directory
module purge
LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; MODULEPATH="/ihome/crc/modules/Core"; export MODULEPATH; LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; MODULEPATH="/ihome/crc/modules/Core"; export MODULEPATH; _ModuleTable001_="X01vZHVsZVRhYmxlXz17WyJhY3RpdmVTaXplIl09MCxiYXNlTXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL0NvcmUiLH0sWyJjX3JlYnVpbGRUaW1lIl09ZmFsc2UsWyJjX3Nob3J0VGltZSJdPWZhbHNlLGZhbWlseT17fSxpbmFjdGl2ZT17fSxtVD17fSxtcGF0aEE9eyIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZSIsfSxbInN5c3RlbUJhc2VNUEFUSCJdPSIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZSIsWyJ2ZXJzaW9uIl09Mix9"; export _ModuleTable001_; _ModuleTable_Sz_="1"; export _ModuleTable_Sz_;
module load intel/2017.1.132
LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; MODULEPATH="/ihome/crc/modules/Core"; export MODULEPATH; LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; LOADEDMODULES="intel/2017.1.132"; export LOADEDMODULES; MODULEPATH="/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; _LMFILES_="/ihome/crc/modules/Core/intel/2017.1.132.lua"; export _LMFILES_; _ModuleTable001_="X01vZHVsZVRhYmxlXz17WyJhY3RpdmVTaXplIl09MSxiYXNlTXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL0NvcmUiLH0sWyJjX3JlYnVpbGRUaW1lIl09ZmFsc2UsWyJjX3Nob3J0VGltZSJdPWZhbHNlLGZhbWlseT17fSxpbmFjdGl2ZT17fSxtVD17aW50ZWw9e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvcmUvaW50ZWwvMjAxNy4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTAsWyJmdWxsTmFtZSJdPSJpbnRlbC8yMDE3LjEuMTMyIixbImxvYWRPcmRlciJdPTEscHJvcFQ9e30sWyJzaG9ydCJdPSJpbnRlbCIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LH0sbXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL0NvbXBpbGVyL2ludGVsLzIwMTcuMS4xMzIiLCIvaWhvbWUvY3Jj"; export _ModuleTable001_; _ModuleTable002_="L21vZHVsZXMvQ29yZSIsfSxbInN5c3RlbUJhc2VNUEFUSCJdPSIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZSIsWyJ2ZXJzaW9uIl09Mix9"; export _ModuleTable002_; _ModuleTable_Sz_="2"; export _ModuleTable_Sz_; source /ihome/crc/install/intel/2017.1.132/bin/compilervars.sh intel64;
#!/bin/sh
#
# Copyright  (C) 1985-2016 Intel Corporation. All rights reserved.
#
# The information and source code contained herein is the exclusive property
# of Intel Corporation and may not be disclosed, examined, or reproduced in
# whole or in part without explicit written authorization from the Company.
#

PROD_DIR="/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017/linux"

INTEL_TARGET_ARCH=
INTEL_TARGET_PLATFORM=linux

if [ -e "$PROD_DIR/bin/intel64/icl_fbsd.cfg" ]; then
    INTEL_TARGET_ARCH=intel64
    INTEL_TARGET_PLATFORM=freebsd
fi

COMPILERVARS_ARGV=$#
if [ $# -eq 0 ]; then
  if [ "$COMPILERVARS_ARCHITECTURE" != '' ]; then
    INTEL_TARGET_ARCH=$COMPILERVARS_ARCHITECTURE
  fi
  if [ "$COMPILERVARS_PLATFORM" != '' ]; then
    INTEL_TARGET_PLATFORM=$COMPILERVARS_PLATFORM
  fi
fi

while [ $# -gt 0 ]
do
opt="$1"
case $opt in 
  -arch)
  shift
  INTEL_TARGET_ARCH="$1"
  shift
  ;;
  -platform)
  shift
  INTEL_TARGET_PLATFORM="$1"
  shift
  ;; 
  *)
  INTEL_TARGET_ARCH="$1"
  shift
  ;;
esac
done

if [ ! -e "$PROD_DIR/bin/intel64/icl_fbsd.cfg" ] && \
   [ "$INTEL_TARGET_ARCH" != "ia32" -a "$INTEL_TARGET_ARCH" != "intel64" -o \
     "$INTEL_TARGET_PLATFORM" != "android" -a "$INTEL_TARGET_PLATFORM" != "linux" -a "$INTEL_TARGET_PLATFORM" != "mac" ]; then

  echo "compilervars.sh [-arch] <arch> [-platform <platform>]"
  echo ""
  echo "  <arch> must be one of the following:"
  echo "      ia32           : Set up for IA-32 target."
  echo "      intel64        : Set up for Intel(R)64 target."
  echo "  <platform> must be of the following:"
  if [ "`uname`" = "Darwin" ]; then
    echo "      linux          : Set to Linux* target."
    echo "      mac            : Set to OS X* target.(default)"
  else
    echo "      android        : Set to Android* target."
    echo "      linux          : Set to Linux* target.(default)"
  fi
  echo ""
  echo "If the arguments to the sourced script are ignored (consult docs"
  echo "for your shell) the alternative way to specify target is environment"
  echo "variables COMPILERVARS_ARCHITECTURE to pass <arch> to the script"
  echo "and COMPILERVARS_PLATFORM to pass <platform>"

  return 1
elif [ -e "$PROD_DIR/bin/intel64/icl_fbsd.cfg" ] && \
     [ "$INTEL_TARGET_ARCH" != "intel64" -o \
       "$INTEL_TARGET_PLATFORM" != "freebsd" ]; then

  echo "compilervars.sh [-arch <arch>] [-platform <platform>]"
  echo ""
  echo "  <arch> must be one of the following:"
  echo "      intel64        : Set up for Intel(R)64 target."
  echo "  <platform> must be of the following:"
  echo "      freebsd        : Set to FreeBSD* target."
  echo ""
  echo "If the arguments to the sourced script are ignored (consult docs"
  echo "for your shell) the alternative way to specify target is environment"
  echo "variables COMPILERVARS_ARCHITECTURE to pass <arch> to the script"
  echo "and COMPILERVARS_PLATFORM to pass <platform>"

  return 1
fi

if [ "$INTEL_TARGET_PLATFORM" = "mac" ]; then
  INTEL_TARGET_PLATFORM="linux"
fi

if [ $COMPILERVARS_ARGV -eq 0 ] ; then
  #pass default values via COMPILERVARS_*
  if [ "$COMPILERVARS_ARCHITECTURE" = '' ]; then
    COMPILERVARS_ARCHITECTURE=$INTEL_TARGET_ARCH
  fi
  if [ "$COMPILERVARS_PLATFORM" = '' ]; then
    COMPILERVARS_PLATFORM=$INTEL_TARGET_PLATFORM
  fi
  INTEL_TARGET_ARCH=
  INTEL_TARGET_PLATFORM=
fi

if [ -e "$PROD_DIR/daal/bin/daalvars.sh" ]; then
   . "$PROD_DIR/daal/bin/daalvars.sh" $INTEL_TARGET_ARCH 
fi
#!/bin/bash
#===============================================================================
# Copyright 2014-2016 Intel Corporation All Rights Reserved.
#
# The source code,  information  and material  ("Material") contained  herein is
# owned by Intel Corporation or its  suppliers or licensors,  and  title to such
# Material remains with Intel  Corporation or its  suppliers or  licensors.  The
# Material  contains  proprietary  information  of  Intel or  its suppliers  and
# licensors.  The Material is protected by  worldwide copyright  laws and treaty
# provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
# modified, published,  uploaded, posted, transmitted,  distributed or disclosed
# in any way without Intel's prior express written permission.  No license under
# any patent,  copyright or other  intellectual property rights  in the Material
# is granted to  or  conferred  upon  you,  either   expressly,  by implication,
# inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
# property rights must be express and approved by Intel in writing.
#
# Unless otherwise agreed by Intel in writing,  you may not remove or alter this
# notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
# suppliers or licensors in any way.
#===============================================================================

daal_help() {
    echo "Syntax: source $__daal_tmp_script_name <arch>"
    echo "Where <arch> is one of:"
    echo "  ia32      - setup environment for IA-32 architecture"
    echo "  intel64   - setup environment for Intel(R) 64 architecture"
    echo ""
    echo "If the arguments to the sourced script are ignored (consult docs for"
    echo "your shell) the alternative way to specify target is environment"
    echo "variables COMPILERVARS_ARCHITECTURE or DAALVARS_ARCHITECTURE to pass"
    echo "<arch> to the script."
    echo ""
}

set_daal_env() {
    __daal_tmp_dir="/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux"
    __daal_tmp_dir=$__daal_tmp_dir/daal
    if [ ! -d $__daal_tmp_dir ]; then
        __daal_tmp_dir=$(command -p cd $(dirname -- "${BASH_SOURCE}")/..; pwd)
    fi

    __daal_tmp_script_name="daalvars.sh"
    __daal_tmp_target_arch=""

    if [ -z "$1" ] ; then
        if [ -n "$DAALVARS_ARCHITECTURE" ] ; then
            __daal_tmp_target_arch="$DAALVARS_ARCHITECTURE"
        elif [ -n "$COMPILERVARS_ARCHITECTURE" ] ; then
            __daal_tmp_target_arch="$COMPILERVARS_ARCHITECTURE"
        fi
    else
        __daal_tmp_target_arch=$1
    fi

    case $__daal_tmp_target_arch in
        ia32|intel64)
            export DAALROOT=$__daal_tmp_dir
            export CPATH=$__daal_tmp_dir/include${CPATH+:${CPATH}}
            if [ -z "$TBBROOT" ]; then
                export LIBRARY_PATH=$__daal_tmp_dir/lib/${__daal_tmp_target_arch}_lin:$__daal_tmp_dir/../tbb/lib/${__daal_tmp_target_arch}_lin/gcc4.4${LIBRARY_PATH+:${LIBRARY_PATH}}
                export LD_LIBRARY_PATH=$__daal_tmp_dir/lib/${__daal_tmp_target_arch}_lin:$__daal_tmp_dir/../tbb/lib/${__daal_tmp_target_arch}_lin/gcc4.4${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}
            else
                export LIBRARY_PATH=$__daal_tmp_dir/lib/${__daal_tmp_target_arch}_lin${LIBRARY_PATH+:${LIBRARY_PATH}}
                export LD_LIBRARY_PATH=$__daal_tmp_dir/lib/${__daal_tmp_target_arch}_lin${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}
            fi
            export CLASSPATH=$__daal_tmp_dir/lib/daal.jar${CLASSPATH+:${CLASSPATH}}
            ;;
        *) daal_help
            ;;
    esac
}

set_daal_env "$@"
if [ -e "$PROD_DIR/../../debugger_2017/bin/debuggervars.sh" ]; then
  . "$PROD_DIR/../../debugger_2017/bin/debuggervars.sh" $INTEL_TARGET_ARCH 
fi
#!/bin/bash
#
# Copyright (C) 2013-2016 Intel Corporation. All rights reserved.
#
# The information and source code contained herein is the exclusive property
# of Intel Corporation and may not be disclosed, examined, or reproduced in
# whole or in part without explicit written authorization from the Company.
#

INST="/ihome/crc/install/intel/2017.1.132"

DEBUGGERDIR="${INST}/debugger_2017"

if [ "$LC_CTYPE" ]
    then
        LANGUAGE_TERRITORY=`echo $LC_CTYPE | sed s/\\\\..\\*//`
    else  if [ "$LANG" ]
    then
        LANGUAGE_TERRITORY=`echo $LANG | sed s/\\\\..\\*//`
    fi
fi
echo $LANG | sed s/\\..\*//

case $LANGUAGE_TERRITORY in
ja_JP)
    LANGUAGE_TERRITORY="ja"
    if [ ! -d "${INST}/documentation_2017/${LANGUAGE_TERRITORY}/debugger/" ]
    then
         LANGUAGE_TERRITORY="en"
    fi
    ;;
*)
    LANGUAGE_TERRITORY="en"
    ;;
esac

DOCDIR="${INST}/documentation_2017/${LANGUAGE_TERRITORY}/debugger/"

if [ -d "${DOCDIR}/gdb-ia" ]
then
      GDBINFO="${DOCDIR}/gdb-ia/info/"
      GDBMAN="${DOCDIR}/gdb-ia/man/"
fi

if [ -d "${DOCDIR}/gdb-mic" ]
then
      GDBINFO="$GDBINFO:${DOCDIR}/gdb-mic/info/"
      GDBMAN="$GDBMAN:${DOCDIR}/gdb-mic/man/"
fi

if [ -d "${DOCDIR}/gdb-igfx" ]
then
      GDBINFO="$GDBINFO:${DOCDIR}/gdb-igfx/info/"
      GDBMAN="$GDBMAN:${DOCDIR}/gdb-igfx/man/"
fi

case `uname -m` in
  "x86_64")
    DEBUGGERARCH="intel64"
    if [ -d "$DEBUGGERDIR/gdb/${DEBUGGERARCH}_mic" ]
    then
        PPREF_MIC="$DEBUGGERDIR/gdb/${DEBUGGERARCH}_mic"
        export GDB_CROSS="$DEBUGGERDIR/gdb/${DEBUGGERARCH}_mic/bin/gdb-mic"
        export GDBSERVER_MIC="$DEBUGGERDIR/gdb/targets/mic/bin/gdbserver"
        export MPM_LAUNCHER="$DEBUGGERDIR/mpm/mic/bin/start_mpm.sh"
    fi
    ;;
  *)
    DEBUGGERARCH="ia32"
    ;;
esac
uname -m

PPREF="$DEBUGGERDIR/gdb/$DEBUGGERARCH"
export INTEL_PYTHONHOME="$DEBUGGERDIR/python/$DEBUGGERARCH/"

if [ -d "$DEBUGGERDIR/libipt/$DEBUGGERARCH/lib" ]
then
    if [ -z "${LD_LIBRARY_PATH}" ]
    then
        export LD_LIBRARY_PATH=$DEBUGGERDIR/libipt/$DEBUGGERARCH/lib
    else
        export LD_LIBRARY_PATH=$DEBUGGERDIR/libipt/$DEBUGGERARCH/lib:$LD_LIBRARY_PATH
    fi
fi

if [ -d "$DEBUGGERDIR/iga/lib" ]
then
    if [ -z "${LD_LIBRARY_PATH}" ]
    then
        export LD_LIBRARY_PATH=$DEBUGGERDIR/iga/lib
    else
        export LD_LIBRARY_PATH=$DEBUGGERDIR/iga/lib:$LD_LIBRARY_PATH
    fi
fi

if [ -z "$MANPATH" ]
then
    MANPATH_CMD=`which manpath 2>/dev/null`
    if [ ! -z "$MANPATH_CMD" ]
    then
        MANPATH_CMD=`manpath`
        export MANPATH="$GDBMAN:${MANPATH_CMD}"
    else
        export MANPATH="$GDBMAN"
    fi
    unset MANPATH_CMD
else
    export MANPATH="$GDBMAN:${MANPATH}"
fi
which manpath 2>/dev/null
manpath


if [ -z "${INFOPATH}" ]
then
    export INFOPATH=$GDBINFO
else
    export INFOPATH=$GDBINFO:$INFOPATH
fi

if [ -z "${NLSPATH}" ]
then
    export NLSPATH="$PPREF/share/locale/%l_%t/%N"
else
    export NLSPATH="$PPREF/share/locale/%l_%t/%N:${NLSPATH}"
fi

if [ "${PPREF_MIC}" ]
then
    export NLSPATH="$PPREF_MIC/share/locale/%l_%t/%N:${NLSPATH}"
    export PATH="$PPREF_MIC/bin:${PATH}"
    unset PPREF_MIC
fi

unset INST PPREF DEBUGGERARCH DEBUGGERDIR DOCDIR GDBINFO GDBMAN LANGUAGE_TERRITORY
if [ -e "$PROD_DIR/tbb/bin/tbbvars.sh" ]; then
   . "$PROD_DIR/tbb/bin/tbbvars.sh" $INTEL_TARGET_ARCH $INTEL_TARGET_PLATFORM
fi
#!/bin/sh
#
# Copyright 2005-2016 Intel Corporation.  All Rights Reserved.
#
# The source code contained or described herein and all documents related
# to the source code ("Material") are owned by Intel Corporation or its
# suppliers or licensors.  Title to the Material remains with Intel
# Corporation or its suppliers and licensors.  The Material is protected
# by worldwide copyright laws and treaty provisions.  No part of the
# Material may be used, copied, reproduced, modified, published, uploaded,
# posted, transmitted, distributed, or disclosed in any way without
# Intel's prior express written permission.
#
# No license under any patent, copyright, trade secret or other
# intellectual property right is granted to or conferred upon you by
# disclosure or delivery of the Materials, either expressly, by
# implication, inducement, estoppel or otherwise.  Any license under such
# intellectual property rights must be express and approved by Intel in
# writing.


get_library_directory () {
    gcc_version_full=$(gcc --version | grep "gcc" | egrep -o " [0-9]+\.[0-9]+\.[0-9]+.*" | sed -e "s/^\ //")
    if [ $? -eq 0 ]; then
        gcc_version=$(echo "$gcc_version_full" | egrep -o "^[0-9]+\.[0-9]+\.[0-9]+")
    fi
    case "${gcc_version}" in
    4.[7-9]*|[5-9]* )
        lib_dir="gcc4.7";;
    4.[4-6]* )
        lib_dir="gcc4.4";;
    * )
        lib_dir="gcc4.1";;
    esac
    echo $lib_dir
}

# Parsing script arguments
# Arg1 represents target architecture. Its possible values are 'ia32' or 'intel64',
# default value equals to the value of $COMPILERVARS_ARCHITECTURE environment variable.
if [ "$1" = "ia32" -o "$1" = "intel64" ]; then
    TBB_TARGET_ARCH=$1
elif [ "$COMPILERVARS_ARCHITECTURE" = "ia32" -o "$COMPILERVARS_ARCHITECTURE" = "intel64" ]; then
    TBB_TARGET_ARCH=$COMPILERVARS_ARCHITECTURE
else
    echo "ERROR: Unknown switch '$1'. Accepted values: ia32, intel64"
    return 1;
fi

# Arg2 represents target platform. Its possible values are 'android' or 'linux'.
# If $COMPILERVARS_PLATFORM environment variable is defined,
# the default value of $TBB_TARGET_PLATFORM equals to its value.
# Otherwise it equals to 'linux'.
if [ "$2" = "linux" -o "$2" = "android" ]; then
    TBB_TARGET_PLATFORM=$2
elif [ "$COMPILERVARS_PLATFORM" = "linux" -o "$COMPILERVARS_PLATFORM" = "android" ]; then
    TBB_TARGET_PLATFORM=$COMPILERVARS_PLATFORM
else
    TBB_TARGET_PLATFORM="linux"
fi

# Arg3 represents TBBROOT detection method. Its possible value is 'auto_tbbroot'. In which case
# the environment variable TBBROOT is detected automatically by using the script directory path.
TBBROOT=/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb
if [ -n "${BASH_SOURCE}" ]; then
    if [ "$3" = "auto_tbbroot" ]; then
       TBBROOT=$(cd $(dirname ${BASH_SOURCE}) && pwd -P)/..
    fi
fi
export TBBROOT

if [ "$TBB_TARGET_PLATFORM" != "android" ]; then
    which gcc >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        library_directory="$TBB_TARGET_ARCH/$(get_library_directory)"
    else
        echo "WARNING: 'gcc' was not found"
        library_directory="$TBB_TARGET_ARCH/gcc4.1"
    fi
elif [ "$TBB_TARGET_PLATFORM" = "android" ]; then
    if [ "$TBB_TARGET_ARCH" = "ia32" ]; then
        library_directory="$TBB_TARGET_PLATFORM"
    elif [ "$TBB_TARGET_ARCH" = "intel64" ]; then
        library_directory="$TBB_TARGET_PLATFORM/x86_64"
    fi
else
    library_directory=""
fi

if [ -e "${TBBROOT}/lib/mic/libtbb.so" ]; then
    if [ -z "${MIC_LD_LIBRARY_PATH}" ]; then
        MIC_LD_LIBRARY_PATH="$TBBROOT/lib/mic"; export MIC_LD_LIBRARY_PATH
    else
        MIC_LD_LIBRARY_PATH="$TBBROOT/lib/mic:${MIC_LD_LIBRARY_PATH}"; export MIC_LD_LIBRARY_PATH
    fi

    if [ -z "${MIC_LIBRARY_PATH}" ]; then
        MIC_LIBRARY_PATH="$TBBROOT/lib/mic"; export MIC_LIBRARY_PATH
    else
        MIC_LIBRARY_PATH="$TBBROOT/lib/mic:${MIC_LIBRARY_PATH}"; export MIC_LIBRARY_PATH
    fi
fi

if [ -z "${LD_LIBRARY_PATH}" ]; then
    LD_LIBRARY_PATH="$TBBROOT/lib/$library_directory"; export LD_LIBRARY_PATH
else
    LD_LIBRARY_PATH="$TBBROOT/lib/$library_directory:${LD_LIBRARY_PATH}"; export LD_LIBRARY_PATH
fi

if [ -z "${LIBRARY_PATH}" ]; then
    LIBRARY_PATH="$TBBROOT/lib/$library_directory"; export LIBRARY_PATH
else
    LIBRARY_PATH="$TBBROOT/lib/$library_directory:${LIBRARY_PATH}"; export LIBRARY_PATH
fi

if [ -z "${CPATH}" ]; then
    CPATH="${TBBROOT}/include"; export CPATH
else
    CPATH="${TBBROOT}/include:$CPATH"; export CPATH
fi
if [ -e "$PROD_DIR/mkl/bin/mklvars.sh" ]; then
  . "$PROD_DIR/mkl/bin/mklvars.sh" $INTEL_TARGET_ARCH 
fi
#!/bin/sh
#===============================================================================
# Copyright 2003-2016 Intel Corporation All Rights Reserved.
#
# The source code,  information  and material  ("Material") contained  herein is
# owned by Intel Corporation or its  suppliers or licensors,  and  title to such
# Material remains with Intel  Corporation or its  suppliers or  licensors.  The
# Material  contains  proprietary  information  of  Intel or  its suppliers  and
# licensors.  The Material is protected by  worldwide copyright  laws and treaty
# provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
# modified, published,  uploaded, posted, transmitted,  distributed or disclosed
# in any way without Intel's prior express written permission.  No license under
# any patent,  copyright or other  intellectual property rights  in the Material
# is granted to  or  conferred  upon  you,  either   expressly,  by implication,
# inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
# property rights must be express and approved by Intel in writing.
#
# Unless otherwise agreed by Intel in writing,  you may not remove or alter this
# notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
# suppliers or licensors in any way.
#===============================================================================

mkl_help() {
    echo ""
    echo "Syntax:"
    echo "  source $__mkl_tmp_SCRIPT_NAME <arch> [MKL_interface] [${__mkl_tmp_MOD_NAME}]"
    echo ""
    echo "   <arch> must be one of the following"
    echo "       ia32         : Setup for IA-32 architecture"
    echo "       intel64      : Setup for Intel(R) 64 architecture"
    echo "       mic          : Setup for Intel(R) Many Integrated Core Architecture"
    echo ""
    echo "   ${__mkl_tmp_MOD_NAME} (optional) - set path to Intel(R) MKL F95 modules"
    echo ""
    echo "   MKL_interface (optional) - Intel(R) MKL programming interface for intel64"
    echo "                              Not applicable without ${__mkl_tmp_MOD_NAME}"
    echo "       lp64         : 4 bytes integer (default)"
    echo "       ilp64        : 8 bytes integer"
    echo ""
    echo "If the arguments to the sourced script are ignored (consult docs for"
    echo "your shell) the alternative way to specify target is environment"
    echo "variables COMPILERVARS_ARCHITECTURE or MKLVARS_ARCHITECTURE to pass"
    echo "<arch> to the script, MKLVARS_INTERFACE to pass <MKL_interface> and"
    echo "MKLVARS_MOD to pass <${__mkl_tmp_MOD_NAME}>"
    echo ""
}

get_tbb_library_directory() {
    __tbb_tmp_lib_dir="gcc4.1"
    which gcc >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        __tbb_tmp_gcc_version_full=$(gcc --version | grep "gcc" | egrep -o " [0-9]+\.[0-9]+\.[0-9]+.*" | sed -e "s/^\ //")
        if [ $? -eq 0 ]; then
            __tbb_tmp_gcc_version=$(echo "${__tbb_tmp_gcc_version_full}" | egrep -o "^[0-9]+\.[0-9]+\.[0-9]+")
        fi
        case "${__tbb_tmp_gcc_version}" in
        4.[7-9]*|[5-9]* )
            __tbb_tmp_lib_dir="gcc4.7";;
        4.[4-6]* )
            __tbb_tmp_lib_dir="gcc4.4";;
        * )
            __tbb_tmp_lib_dir="gcc4.1";;
        esac
    fi
    echo ${__tbb_tmp_lib_dir}
}

if_mic() {
    __cmd=$1
    __arg1=$2
    __arg2=$3

    if [ "${__mkl_tmp_TARGET_ARCH}" = "mic" ]; then
        echo :`${__cmd} ${__arg1} ${__arg2}`
    fi
}

set_ld_library_path() {
    __tmp_target_arch_path=$1
    __tmp_ld_library_path="${__compiler_dir}/${__tmp_target_arch_path}:${__mkl_lib_dir}/${__tmp_target_arch_path}"

    __tmp_tbb_arch_path=$2
    __tmp_ld_library_path=${__tmp_tbb_arch_path:+"${__tmp_tbb_arch_path}:"}${__tmp_ld_library_path}

    echo "${__tmp_ld_library_path}"
}

set_library_path() {
    __tmp_target_arch_path=$1
    __tmp_tbb_arch_path=$2

    if [ "${__tmp_target_arch_path}" = "${__subdir_arch_ia32}" ]; then
        __tmp_library_path="${__compiler_dir}/${__tmp_target_arch_path}:${__mkl_lib_dir}/${__tmp_target_arch_path}"
        __tmp_library_path=${__tmp_tbb_arch_path:+"${__tmp_tbb_arch_path}:"}${__tmp_library_path}
    else
        __tmp_library_path="${__compiler_dir}/${__subdir_arch_intel64}:${__mkl_lib_dir}/${__subdir_arch_intel64}"
        __tmp_library_path=${__tmp_tbb_arch_path:+"${__tmp_tbb_arch_path}:"}${__tmp_library_path}
    fi

    echo "${__tmp_library_path}"
}

set_mic_ld_library_path() {
    __tmp_mic_ld_library_path="${__compiler_dir}/${__subdir_arch_mic}:${__mkl_lib_dir}/${__subdir_arch_mic}"
    __tmp_tbb_arch_path=$1

    __tmp_mic_ld_library_path=${__tmp_tbb_arch_path:+"${__tmp_tbb_arch_path}:"}${__tmp_mic_ld_library_path}

    echo "${__tmp_mic_ld_library_path}"
}

set_mic_library_path() {
    __tmp_mic_library_path="${__compiler_dir}/${__subdir_arch_mic}:${__mkl_lib_dir}/${__subdir_arch_mic}"
    __tmp_tbb_arch_path=$1

    __tmp_mic_library_path=${__tmp_tbb_arch_path:+"${__tmp_tbb_arch_path}:"}${__tmp_mic_library_path}

    echo "${__tmp_mic_library_path}"
}

set_nls_path() {
    __tmp_target_arch_path=$1
    echo "${__mkl_lib_dir}/${__tmp_target_arch_path}/locale/%l_%t/%N"
}

set_c_path() {
    __tmp_target_arch_path=$1
    __tmp_target_comp_model=$2
    echo "${CPRO_PATH}/mkl/include/${__tmp_target_arch_path}/${__tmp_target_comp_model}"
}

set_tbb_path() {
    __tmp_target_arch_path=$1

    __tmp_tbb_subdir="/$(get_tbb_library_directory)"
    if [ "${__tmp_target_arch_path}" = "${__subdir_arch_mic}" ]; then __tmp_tbb_subdir=""; fi

    __tmp_tbb_path=${__tbb_lib_dir}/${__tmp_target_arch_path}${__tmp_tbb_subdir}
    echo ${__tmp_tbb_path}
}

set_mkl_env() {
    CPRO_PATH=/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux
    export MKLROOT=${CPRO_PATH}/mkl

    __mkl_tmp_SCRIPT_NAME="mklvars.sh"
    __mkl_tmp_MOD_NAME=mod

    __mkl_tmp_LP64_ILP64=
    __mkl_tmp_MOD=
    __mkl_tmp_TARGET_ARCH=
    __mkl_tmp_MKLVARS_VERBOSE=
    __mkl_tmp_BAD_SWITCH=

    if [ -z "$1" ] ; then
        if [ -n "$MKLVARS_ARCHITECTURE" ] ; then
            __mkl_tmp_TARGET_ARCH="$MKLVARS_ARCHITECTURE"
        elif [ -n "$COMPILERVARS_ARCHITECTURE" ] ; then
            __mkl_tmp_TARGET_ARCH="$COMPILERVARS_ARCHITECTURE"
        fi
        if [ "${__mkl_tmp_TARGET_ARCH}" != "ia32" -a "${__mkl_tmp_TARGET_ARCH}" != "intel64" -a "${__mkl_tmp_TARGET_ARCH}" != "mic" ] ; then
            __mkl_tmp_TARGET_ARCH=
        fi
        if [ -n "$MKLVARS_INTERFACE" ] ; then
            __mkl_tmp_LP64_ILP64="$MKLVARS_INTERFACE"
            if [ "${__mkl_tmp_LP64_ILP64}" != "lp64" -a "${__mkl_tmp_LP64_ILP64}" != "ilp64" ] ; then
                __mkl_tmp_LP64_ILP64=
            fi
        fi
        if [ -n "$MKLVARS_MOD" ] ; then
            __mkl_tmp_MOD="$MKLVARS_MOD"
        fi
        if [ -n "$MKLVARS_VERBOSE" ] ; then
            __mkl_tmp_MKLVARS_VERBOSE="$MKLVARS_VERBOSE"
        fi
    else
        while [ -n "$1" ]; do
           if   [ "$1" = "ia32" ]        ; then __mkl_tmp_TARGET_ARCH=ia32;
           elif [ "$1" = "intel64" ]     ; then __mkl_tmp_TARGET_ARCH=intel64;
           elif [ "$1" = "mic" ]         ; then __mkl_tmp_TARGET_ARCH=mic;
           elif [ "$1" = "lp64" ]        ; then __mkl_tmp_LP64_ILP64=lp64;
           elif [ "$1" = "ilp64" ]       ; then __mkl_tmp_LP64_ILP64=ilp64;
           elif [ "$1" = "${__mkl_tmp_MOD_NAME}" ] ; then __mkl_tmp_MOD=${__mkl_tmp_MOD_NAME};
           elif [ "$1" = "verbose" ]     ; then __mkl_tmp_MKLVARS_VERBOSE=verbose;
           else
               __mkl_tmp_BAD_SWITCH=$1
               break 10
           fi
           shift;
        done
    fi

    if [ -n "${__mkl_tmp_BAD_SWITCH}" ] ; then

        echo
        echo "ERROR: Unknown option '${__mkl_tmp_BAD_SWITCH}'"
        mkl_help

    else

        if [ -z "${__mkl_tmp_TARGET_ARCH}" ] ; then

            echo
            echo "ERROR: architecture is not defined. Accepted values: ia32, intel64, mic"
            mkl_help

        else
            __compiler_dir="${CPRO_PATH}/compiler/lib"
            __mkl_lib_dir="${MKLROOT}/lib"
            __tbb_lib_dir="${CPRO_PATH}/tbb/lib"
            __cpath="${MKLROOT}/include"

            __subdir_arch_ia32="ia32_lin"
            __subdir_arch_intel64="intel64_lin"
            __subdir_arch_mic="intel64_lin_mic"

            if   [ "${__mkl_tmp_TARGET_ARCH}" = "ia32" ];     then __target_arch_path="${__subdir_arch_ia32}";
            elif [ "${__mkl_tmp_TARGET_ARCH}" = "intel64" ];  then __target_arch_path="${__subdir_arch_intel64}";
            elif [ "${__mkl_tmp_TARGET_ARCH}" = "mic" ];      then __target_arch_path="${__subdir_arch_mic}";
            fi

            __tbb_path_arch=""
            __tbb_path_mic=""
            if [ -z "${TBBROOT}" ]; then
                if [ -d "${__tbb_lib_dir}" ]; then
                    if [ "${__target_arch_path}" = "${__subdir_arch_ia32}" ]; then
                        __tbb_path_arch=$(set_tbb_path ${__subdir_arch_ia32} )
                    else
                        __tbb_path_arch=$(set_tbb_path ${__subdir_arch_intel64} )
                        __tbb_path_mic=$(set_tbb_path ${__subdir_arch_mic} )
                    fi
                fi
            fi

            __ld_library_path=$(set_ld_library_path ${__target_arch_path} ${__tbb_path_arch})
            __ld_library_path=${__ld_library_path}$(if_mic set_ld_library_path ${__subdir_arch_intel64} ${__tbb_path_mic})
            if [ -d "/opt/intel/mic" ] && [ "${__mkl_tmp_TARGET_ARCH}" != "ia32" ] ; then
                __ld_library_path="/opt/intel/mic/coi/host-linux-release/lib:/opt/intel/mic/myo/lib":${__ld_library_path}
            fi

            __library_path=$(set_library_path ${__target_arch_path} ${__tbb_path_arch})

            if [ "${__mkl_tmp_TARGET_ARCH}" != "ia32" ]; then
                __mic_ld_library_path=$(set_mic_ld_library_path ${__tbb_path_mic})
                if [ -d "/opt/intel/mic" ] && [ "${__mkl_tmp_TARGET_ARCH}" != "ia32" ]; then
                    __mic_ld_library_path="/opt/intel/mic/coi/device-linux-release/lib:/opt/intel/mic/myo/lib":${__mic_ld_library_path}
                fi
                __mic_library_path=$(set_mic_library_path ${__tbb_path_mic})
            fi

            __nlspath=$(set_nls_path ${__target_arch_path})
            __nlspath=${__nlspath}$(if_mic set_nls_path ${__subdir_arch_intel64})

            if [ "${__mkl_tmp_MOD}" = "${__mkl_tmp_MOD_NAME}" ] ; then
                if [ "${__mkl_tmp_TARGET_ARCH}" = "ia32" ] ; then
                    __mkl_tmp_LP64_ILP64=
                else
                    if [ -z "$__mkl_tmp_LP64_ILP64" ] ; then
                        __mkl_tmp_LP64_ILP64=lp64
                    fi
                fi
                __cpath=$(set_c_path ${__target_arch_path} ${__mkl_tmp_LP64_ILP64}):${__cpath}
                __cpath=${__cpath}$(if_mic set_c_path ${__subdir_arch_intel64} ${__mkl_tmp_LP64_ILP64})
            fi

            export LD_LIBRARY_PATH="${__ld_library_path}${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}"
            export LIBRARY_PATH="${__library_path}${LIBRARY_PATH+:${LIBRARY_PATH}}"
            export MIC_LD_LIBRARY_PATH="${__mic_ld_library_path}${MIC_LD_LIBRARY_PATH+:${MIC_LD_LIBRARY_PATH}}"
            export MIC_LIBRARY_PATH="${__mic_library_path}${MIC_LIBRARY_PATH+:${MIC_LIBRARY_PATH}}"
            export NLSPATH="${__nlspath}${NLSPATH+:${NLSPATH}}"
            export CPATH="${__cpath}${CPATH+:${CPATH}}"

            if [ "${__mkl_tmp_MKLVARS_VERBOSE}" = "verbose" ] ; then
                echo LD_LIBRARY_PATH=${LD_LIBRARY_PATH}
                echo LIBRARY_PATH=${LIBRARY_PATH}
                echo MIC_LD_LIBRARY_PATH=${MIC_LD_LIBRARY_PATH}
                echo MIC_LIBRARY_PATH=${MIC_LIBRARY_PATH}
                echo NLSPATH=${NLSPATH}
                echo CPATH=${CPATH}
            fi
        fi
    fi
}

set_mkl_env "$@"
if [ -e "$PROD_DIR/ipp/bin/ippvars.sh" ]; then
  . "$PROD_DIR/ipp/bin/ippvars.sh" $INTEL_TARGET_ARCH $INTEL_TARGET_PLATFORM
fi
#! /bin/sh
#
# Copyright 1999 2016 Intel Corporation All Rights Reserved.
# 
# The source code, information and material ("Material") contained herein is
# owned by Intel Corporation or its suppliers or licensors, and title
# to such Material remains with Intel Corporation or its suppliers or
# licensors. The Material contains proprietary information of Intel
# or its suppliers and licensors. The Material is protected by worldwide
# copyright laws and treaty provisions. No part of the Material may be used,
# copied, reproduced, modified, published, uploaded, posted, transmitted,
# distributed or disclosed in any way without Intel's prior express written
# permission. No license under any patent, copyright or other intellectual
# property rights in the Material is granted to or conferred upon you,
# either expressly, by implication, inducement, estoppel or otherwise.
# Any license under such intellectual property rights must be express and
# approved by Intel in writing.
# 
# Unless otherwise agreed by Intel in writing,
# you may not remove or alter this notice or any other notice embedded in
# Materials by Intel or Intel's suppliers or licensors in any way.
#

export IPPROOT=/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/ipp

__ipp_tmp_target_arch=""
__ipp_tmp_target_platform=""

if [ $# -eq 0 ]; then
  if [ "$COMPILERVARS_ARCHITECTURE" != '' ]; then
    __ipp_tmp_target_arch=$COMPILERVARS_ARCHITECTURE
  fi
  if [ "$COMPILERVARS_PLATFORM" != '' ]; then
    __ipp_tmp_target_platform=$COMPILERVARS_PLATFORM
  fi
fi

while [ "$1" != '' ]
do
  if [ "$1" = "ia32" -o "$1" = "ia32_intel64" -o "$1" = "intel64" ]; then
    __ipp_tmp_target_arch="$1"
  elif [ "$1" = "android" ]; then
    __ipp_tmp_target_platform="$1"
  fi
  shift
done

if [ "$__ipp_tmp_target_arch" != "ia32" -a \
     "$__ipp_tmp_target_arch" != "intel64" -a \
     "$__ipp_tmp_target_arch" != "ia32_intel64" ]
then
  echo "ERROR: architecture is not defined. Accepted values: ia32, intel64, ia32_intel64"
  echo "Syntax: ippvars.sh <arch> [-arch <arch>] [-platform <platform>]"
  echo ""
  echo "  <arch> must be one of the following:"
  echo "      ia32           : Set up for IA-32 target."
  echo "      intel64        : Set up for Intel(R)64 target."
  echo "      ia32_intel64   : Set up for Intel(R)64 target."
  echo "  <platform> must be of the following:"
  echo "      linux          : Set to Linux target."
  echo "      mac            : Set to Mac target."
  echo "      android        : Set to Android target."
  echo ""
  echo "If the arguments to the sourced script are ignored (consult docs"
  echo "for your shell) the alternative way to specify target is environment"
  echo "variables COMPILERVARS_ARCHITECTURE to pass <arch> to the script"
  echo "and COMPILERVARS_PLATFORM to pass <platform>"

  return 1
else
  export CPATH=$IPPROOT/include:$CPATH

  arch=$__ipp_tmp_target_arch

  if [ "$__ipp_tmp_target_arch" = "ia32_intel64" ]; then 
    arch=intel64
  fi

  if [ "$__ipp_tmp_target_platform" = "android" ]; then 
    arch=${__ipp_tmp_target_arch}_and
  fi

  if [ -z "${LD_LIBRARY_PATH}" ]
  then
    LD_LIBRARY_PATH="$IPPROOT/lib/$arch"; export LD_LIBRARY_PATH
  else
    LD_LIBRARY_PATH="$IPPROOT/lib/$arch:${LD_LIBRARY_PATH}"; export LD_LIBRARY_PATH
  fi
 
  if [ -z "${LIBRARY_PATH}" ]
  then
    LIBRARY_PATH="$IPPROOT/lib/$arch"; export LIBRARY_PATH
  else
    LIBRARY_PATH="$IPPROOT/lib/$arch:${LIBRARY_PATH}"; export LIBRARY_PATH
  fi
 
  if [ -d "$IPPROOT/lib/mic" ]
  then
    MIC_LD_LIBRARY_PATH="$IPPROOT/lib/mic:${MIC_LD_LIBRARY_PATH}"; export MIC_LD_LIBRARY_PATH
  fi
fi
if [ -e "$PROD_DIR/mpi/intel64/bin/mpivars.sh" ] && \
   [ "$INTEL_TARGET_ARCH" = "intel64" -o "$COMPILERVARS_ARCHITECTURE" = "intel64" ]; then
  . "$PROD_DIR/mpi/intel64/bin/mpivars.sh"
fi
#!/bin/sh
#
# Copyright (C) 2003-2016 Intel Corporation.  All Rights Reserved.
# 
# The source code contained or described herein and all documents
# related to the source code ("Material") are owned by Intel Corporation
# or its suppliers or licensors.  Title to the Material remains with
# Intel Corporation or its suppliers and licensors.  The Material is
# protected by worldwide copyright and trade secret laws and treaty
# provisions.  No part of the Material may be used, copied, reproduced,
# modified, published, uploaded, posted, transmitted, distributed, or
# disclosed in any way without Intel's prior express written permission.
# 
# No license under any patent, copyright, trade secret or other
# intellectual property right is granted to or conferred upon you by
# disclosure or delivery of the Materials, either expressly, by
# implication, inducement, estoppel or otherwise.  Any license under
# such intellectual property rights must be express and approved by
# Intel in writing.
#

I_MPI_ROOT=/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi; export I_MPI_ROOT

print_help()
{
    echo ""
    echo "Usage: mpivars.sh [i_mpi_library_kind]"
    echo ""
    echo "i_mpi_library_kind can be one of the following:"
    echo "      debug           "
    echo "      debug_mt        "
    echo "      release         "
    echo "      release_mt      "
    echo ""
    echo "If the arguments to the sourced script are ignored (consult docs"
    echo "for your shell) the alternative way to specify target is environment"
    echo "variable I_MPI_LIBRARY_KIND to pass"
    echo "i_mpi_library_kind  to the script."
    echo ""
}

if [ -z "${PATH}" ]
then
    PATH="${I_MPI_ROOT}/intel64/bin"; export PATH
else
    PATH="${I_MPI_ROOT}/intel64/bin:${PATH}"; export PATH
fi

if [ -z "${CLASSPATH}" ]
then
    CLASSPATH="${I_MPI_ROOT}/intel64/lib/mpi.jar"; export CLASSPATH
else
    CLASSPATH="${I_MPI_ROOT}/intel64/lib/mpi.jar:${CLASSPATH}"; export CLASSPATH
fi

if [ -z "${LD_LIBRARY_PATH}" ]
then
    LD_LIBRARY_PATH="${I_MPI_ROOT}/intel64/lib:${I_MPI_ROOT}/mic/lib"; export LD_LIBRARY_PATH
else
    LD_LIBRARY_PATH="${I_MPI_ROOT}/intel64/lib:${I_MPI_ROOT}/mic/lib:${LD_LIBRARY_PATH}"; export LD_LIBRARY_PATH
fi

if [ -z "${MANPATH}" ]
then
    if [ `uname -m` = "k1om" ]
    then
        MANPATH="${I_MPI_ROOT}/man"; export MANPATH
    else
        MANPATH="${I_MPI_ROOT}/man":`manpath 2>/dev/null`; export MANPATH
    fi
else
    MANPATH="${I_MPI_ROOT}/man:${MANPATH}"; export MANPATH
fi

library_kind=""
if [ $# -ne 0 ]
then
    library_kind=$1
else
    library_kind=$I_MPI_LIBRARY_KIND
fi
case "$library_kind" in
    debug|debug_mt|release|release_mt)
        LD_LIBRARY_PATH="${I_MPI_ROOT}/intel64/lib/${library_kind}:${I_MPI_ROOT}/mic/lib/${library_kind}:${LD_LIBRARY_PATH}"; export LD_LIBRARY_PATH
    ;;
    -h|--help)
        print_help
    ;;
esac
if [ -e "$PROD_DIR/pkg_bin/compilervars_arch.sh" ]; then
    . "$PROD_DIR/pkg_bin/compilervars_arch.sh" $INTEL_TARGET_ARCH $INTEL_TARGET_PLATFORM
fi
#! /bin/sh
#
# Copyright  (C) 1985-2016 Intel Corporation. All rights reserved.
#
# The information and source code contained herein is the exclusive property
# of Intel Corporation and may not be disclosed, examined, or reproduced in
# whole or in part without explicit written authorization from the Company.
#

INTEL_INSTALL_DIR_ORIG=$INSTALL_DIR
INTEL_NDK_DIR_ORIG=$NDK_DIR
INSTALL_DIR="/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux"
NDK_DIR="<NDK_DIR>"
NDK_ARCH=''

if [ $# -eq 0 ]; then
	INTEL_TARGET_ARCH=$COMPILERVARS_ARCHITECTURE
	INTEL_TARGET_PLATFORM=$COMPILERVARS_PLATFORM
else
	INTEL_TARGET_ARCH=$1
	INTEL_TARGET_PLATFORM=$2
fi

if [ -z "${PATH}" ] ; then      	
	PATH="$INSTALL_DIR/bin/$INTEL_TARGET_ARCH"; 
else
	PATH="$INSTALL_DIR/bin/$INTEL_TARGET_ARCH:${PATH}"
fi
if [ $INTEL_TARGET_ARCH = "ia32" ]
then
	NDK_ARCH=x86 
	if [ -d "$INSTALL_DIR/mpirt/bin/ia32_lin" ] ; then
		PATH="$INSTALL_DIR/mpirt/bin/ia32_lin:${PATH}"
	fi
elif [ $INTEL_TARGET_ARCH = "intel64" ]
then
	NDK_ARCH=x86_64 
fi
export PATH

if [ "$INTEL_TARGET_PLATFORM" = "android" ] ; then
	export ICCCFG="$INSTALL_DIR/bin/intel64/icc_and.cfg"
	export ICPCCFG="$INSTALL_DIR/bin/intel64/icpc_and.cfg"
	export XIARCFG="$INSTALL_DIR/bin/intel64/xiar_and.cfg"
	export XILDCFG="$INSTALL_DIR/bin/intel64/xild_and.cfg"
else 
	unset ICCCFG
	unset ICPCCFG
	unset XIARCFG
	unset XILDCFG
	unset INTEL_USE_ENVIRONMENT
fi

for a in 9 10 11 12 13 14 15 16 17 18 19 21 L 23 24; do
	if [ -d "${NDK_DIR}/platforms/android-$a/arch-$NDK_ARCH" ] ; then
		ANDROID_SYSROOT="${NDK_DIR}/platforms/android-$a/arch-$NDK_ARCH"
		export ANDROID_SYSROOT
		break;
	fi
done

for g in 4.6 4.8 4.9 ; do
	for h in linux-x86 linux-x86_64 ; do
		if [ -d "${NDK_DIR}/toolchains/$NDK_ARCH-$g/prebuilt/$h" ] ; then
			ANDROID_GNU_X86_TOOLCHAIN="${NDK_DIR}/toolchains/$NDK_ARCH-$g/prebuilt/$h"
			export ANDROID_GNU_X86_TOOLCHAIN
			if [ -e "$ANDROID_GNU_X86_TOOLCHAIN/bin/i686-linux-android-gcc" \
			  -o -e "$ANDROID_GNU_X86_TOOLCHAIN/bin/x86_64-linux-android-gcc" ]
			then
				INTEL_USE_ENVIRONMENT=GCC
			else
				INTEL_USE_ENVIRONMENT=CLANG
			fi
			PATH="$ANDROID_GNU_X86_TOOLCHAIN/bin:${NDK_DIR}/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
			export PATH
			export INTEL_USE_ENVIRONMENT
			break;
		fi
	done
done

if [ "`uname`" = "Darwin" ]; then
	# DYLD_LIBRARY_PATH is used on OS X*
	if [ -z "${DYLD_LIBRARY_PATH}" ]
	then
		DYLD_LIBRARY_PATH="$INSTALL_DIR/compiler/lib:$INSTALL_DIR/compiler/lib/$INTEL_TARGET_ARCH"; export DYLD_LIBRARY_PATH
	else
		DYLD_LIBRARY_PATH="$INSTALL_DIR/compiler/lib:$INSTALL_DIR/compiler/lib/$INTEL_TARGET_ARCH:${DYLD_LIBRARY_PATH}"; export DYLD_LIBRARY_PATH
	fi
	if [ -z "${NLSPATH}" ] 
	then
		NLSPATH="$INSTALL_DIR/compiler/lib/locale/en_US/%N"; export NLSPATH
	else
		NLSPATH="$INSTALL_DIR/compiler/lib/locale/en_US/%N:${NLSPATH}"; export NLSPATH
	fi
	if [ -z "${INTEL_LICENSE_FILE}" ]
	then
		INTEL_LICENSE_FILE="$INSTALL_DIR/licenses:/opt/intel/licenses:${HOME}/intel/licenses:/Users/Shared/Library/Application Support/Intel/Licenses"; export INTEL_LICENSE_FILE 
	else
		INTEL_LICENSE_FILE="${INTEL_LICENSE_FILE}:$INSTALL_DIR/licenses:/opt/intel/licenses:${HOME}/intel/licenses:/Users/Shared/Library/Application Support/Intel/Licenses"; export INTEL_LICENSE_FILE
	fi
	if [ -z "${MANPATH}" ]
	then
		if [ -f "/usr/bin/manpath" ]
	then	
		MANPATH="$INSTALL_DIR/../../man/common":$(manpath):; export MANPATH
	else
		MANPATH="$INSTALL_DIR/../../man/common:"; export MANPATH
	fi
	fi
else
	if [ -d "$INSTALL_DIR/compiler/lib/mic" ] ; then
		if [ -z "${MIC_LD_LIBRARY_PATH}" ] ; then
			MIC_LD_LIBRARY_PATH="$INSTALL_DIR/compiler/lib/mic"
		else
			MIC_LD_LIBRARY_PATH="$INSTALL_DIR/compiler/lib/mic:${MIC_LD_LIBRARY_PATH}"
		fi
		export MIC_LD_LIBRARY_PATH

		if [ -z "${MIC_LIBRARY_PATH}" ] ; then
			MIC_LIBRARY_PATH="$INSTALL_DIR/compiler/lib/mic"
		else
			MIC_LIBRARY_PATH="$INSTALL_DIR/compiler/lib/mic:${MIC_LIBRARY_PATH}"
		fi
		export MIC_LIBRARY_PATH
	fi
	if [ -d "$INSTALL_DIR/mpi/mic/lib" ] ; then
		if [ -z "${MIC_LD_LIBRARY_PATH}" ] ; then
			MIC_LD_LIBRARY_PATH="$INSTALL_DIR/mpi/mic/lib"
		else
			MIC_LD_LIBRARY_PATH="$INSTALL_DIR/mpi/mic/lib:${MIC_LD_LIBRARY_PATH}"
		fi
		export MIC_LD_LIBRARY_PATH

		if [ -z "${MIC_LIBRARY_PATH}" ] ; then
			MIC_LIBRARY_PATH="$INSTALL_DIR/mpi/mic/lib"
		else
			MIC_LIBRARY_PATH="$INSTALL_DIR/mpi/mic/lib:${MIC_LIBRARY_PATH}"
		fi
		export MIC_LIBRARY_PATH
	fi

	if [ -z "${LD_LIBRARY_PATH}" ]
	then
		LD_LIBRARY_PATH="$INSTALL_DIR/compiler/lib/$INTEL_TARGET_ARCH:$INSTALL_DIR/compiler/lib/${INTEL_TARGET_ARCH}_lin"
	else
		LD_LIBRARY_PATH="$INSTALL_DIR/compiler/lib/$INTEL_TARGET_ARCH:$INSTALL_DIR/compiler/lib/${INTEL_TARGET_ARCH}_lin:${LD_LIBRARY_PATH}"
	fi
	if [ $INTEL_TARGET_ARCH = "ia32" -a -d  "$INSTALL_DIR/mpirt/lib/ia32_lin" ]
	then
		LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$INSTALL_DIR/mpirt/lib/ia32_lin"
	fi
	export LD_LIBRARY_PATH
	if [ -z "${NLSPATH}" ] 
	then
		NLSPATH="$INSTALL_DIR/compiler/lib/$INTEL_TARGET_ARCH/locale/%l_%t/%N"; export NLSPATH 
	else
		NLSPATH="$INSTALL_DIR/compiler/lib/$INTEL_TARGET_ARCH/locale/%l_%t/%N:${NLSPATH}"; export NLSPATH
	fi
	if [ -z "${INTEL_LICENSE_FILE}" ]
	then
		INTEL_LICENSE_FILE="$INSTALL_DIR/licenses:/opt/intel/licenses:${HOME}/intel/licenses"; export INTEL_LICENSE_FILE 
	else
		INTEL_LICENSE_FILE="${INTEL_LICENSE_FILE}:$INSTALL_DIR/licenses:/opt/intel/licenses:${HOME}/intel/licenses"; export INTEL_LICENSE_FILE
	fi
	if [ -z "${MANPATH}" -a -d "$INSTALL_DIR/../../man/common" ]
	then
		if [ -f "/usr/bin/manpath" ]
		then	
			MANPATH=`cd "$INSTALL_DIR/../../man/common" && pwd`:`manpath`:; export MANPATH
		else
			MANPATH=`cd "$INSTALL_DIR/../../man/common" && pwd`; export MANPATH
		fi
        elif [ -d "$INSTALL_DIR/../../man/common" ]
        then
		MANPATH=`cd "$INSTALL_DIR/../../man/common" && pwd`:"$MANPATH":; export MANPATH
	fi
fi
uname
cd "$INSTALL_DIR/../../man/common" && pwd

if [ -n "${INTEL_INSTALL_DIR_ORIG}" ]
then
	INSTALL_DIR=${INTEL_INSTALL_DIR_ORIG}
else
	unset INSTALL_DIR
fi
if [ -n "${INTEL_NDK_DIR_ORIG}" ]
then
	NDK_DIR=${INTEL_NDK_DIR_ORIG}
else
	unset NDK_DIR
fi
unset INTEL_INSTALL_DIR_ORIG
unset INTEL_NDK_DIR_ORIG

module load intel-mpi/2017.1.132
LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; MODULEPATH="/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; CMAKE_INCLUDE_PATH="/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/include"; export CMAKE_INCLUDE_PATH; CMAKE_LIBRARY_PATH="/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/lib"; export CMAKE_LIBRARY_PATH; I_MPI_ROOT="/ihome/crc/install/intel/2017.1.132/impi/2017.1.132"; export I_MPI_ROOT; LD_LIBRARY_PATH="/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/mic/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/ipp/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64/gcc4.7:/ihome/crc/install/intel/2017.1.132/debugger_2017/iga/lib:/ihome/crc/install/intel/2017.1.132/debugger_2017/libipt/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/daal/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64_lin/gcc4.4"; export LD_LIBRARY_PATH; LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; LOADEDMODULES="intel/2017.1.132:intel-mpi/2017.1.132"; export LOADEDMODULES; MANPATH="/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/man:/ihome/crc/install/intel/2017.1.132/man/common:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-ia/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-mic/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-igfx/man:/ihome/jkeith/kas389/anaconda/share/man:/ihome/jkeith/kas389/tex/2015/bin/x86_64-linux/man:/usr/local/share/man:/usr/share/man::"; export MANPATH; MODULEPATH="/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132:/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; PATH="/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/bin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/bin/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin:/ihome/crc/install/intel/2017.1.132/debugger_2017/gdb/intel64_mic/bin:/ihome/sam/bmooreii/workspace/slurm-wrappers:/ihome/jkeith/kas389/python/kitchin-python/jasp/jasp/bin:/ihome/jkeith/kas389/anaconda/bin:/ihome/jkeith/kas389/tex/2015/bin/x86_64-linux:/ihome/sam/bmooreii/workspace/slurm-wrappers:/ihome/jkeith/kas389/jasp/jasp/bin:/ihome/jkeith/kas389/anaconda/bin:/ihome/jkeith/kas389/tex/2015/bin/x86_64-linux:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/ihome/crc/wrappers:/ihome/jkeith/kas389/python/gamess:/ihome/jkeith/kas389/python/vasp:/ihome/jkeith/kas389/python/alchemy:/ihome/jkeith/kas389/python/cpmd:/ihome/jkeith/kas389/python/tmol:/ihome/jkeith/kas389/python/reax:/ihome/jkeith/egottlie/karthi_scripts:/ihome/jkeith/kas389/python/subScripts:/ihome/jkeith/kas389/python/bader:/ihome/jkeith/kas389/python/cp2k:/ihome/jkeith/kas389/p4vasp/bin:/ihome/jkeith/kas389/bin:/ihome/jkeith/kas389/python/gamess:/ihome/jkeith/kas389/python/vasp:/ihome/jkeith/kas389/python/alchemy:/ihome/jkeith/kas389/python/cpmd:/ihome/jkeith/kas389/python/tmol:/ihome/jkeith/kas389/python/reax:/ihome/jkeith/egottlie/karthi_scripts:/ihome/jkeith/kas389/python/subScripts:/ihome/jkeith/kas389/python/bader:/ihome/jkeith/kas389/python/cp2k"; export PATH; _LMFILES_="/ihome/crc/modules/Core/intel/2017.1.132.lua:/ihome/crc/modules/Compiler/intel/2017.1.132/intel-mpi/2017.1.132.lua"; export _LMFILES_; _ModuleTable001_="X01vZHVsZVRhYmxlXz17WyJhY3RpdmVTaXplIl09MixiYXNlTXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL0NvcmUiLH0sWyJjX3JlYnVpbGRUaW1lIl09ZmFsc2UsWyJjX3Nob3J0VGltZSJdPWZhbHNlLGZhbWlseT17fSxpbmFjdGl2ZT17fSxtVD17aW50ZWw9e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvcmUvaW50ZWwvMjAxNy4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTAsWyJmdWxsTmFtZSJdPSJpbnRlbC8yMDE3LjEuMTMyIixbImxvYWRPcmRlciJdPTEscHJvcFQ9e30sWyJzaG9ydCJdPSJpbnRlbCIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LFsiaW50ZWwtbXBpIl09e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvbXBpbGVyL2ludGVsLzIwMTcuMS4xMzIv"; export _ModuleTable001_; _ModuleTable002_="aW50ZWwtbXBpLzIwMTcuMS4xMzIubHVhIixbImRlZmF1bHQiXT0wLFsiZnVsbE5hbWUiXT0iaW50ZWwtbXBpLzIwMTcuMS4xMzIiLFsibG9hZE9yZGVyIl09Mixwcm9wVD17fSxbInNob3J0Il09ImludGVsLW1waSIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LH0sbXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL01QSS9pbnRlbC8yMDE3LjEuMTMyL2ludGVsLW1waS8yMDE3LjEuMTMyIiwiL2lob21lL2NyYy9tb2R1bGVzL0NvbXBpbGVyL2ludGVsLzIwMTcuMS4xMzIiLCIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZSIsfSxbInN5c3RlbUJhc2VNUEFUSCJdPSIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZSIsWyJ2ZXJzaW9uIl09Mix9"; export _ModuleTable002_; _ModuleTable_Sz_="2"; export _ModuleTable_Sz_;
module load mkl
LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; MODULEPATH="/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132:/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; CMAKE_INCLUDE_PATH="/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/include"; export CMAKE_INCLUDE_PATH; CMAKE_LIBRARY_PATH="/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/lib"; export CMAKE_LIBRARY_PATH; INTEL_MKL_ROOT="/ihome/crc/install/intel/2017.1.132/mkl"; export INTEL_MKL_ROOT; LD_LIBRARY_PATH="/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/mic/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/ipp/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64/gcc4.7:/ihome/crc/install/intel/2017.1.132/debugger_2017/iga/lib:/ihome/crc/install/intel/2017.1.132/debugger_2017/libipt/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/daal/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64_lin/gcc4.4"; export LD_LIBRARY_PATH; LIBRARY_PATH="/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/ipp/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64/gcc4.7:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/daal/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64_lin/gcc4.4"; export LIBRARY_PATH; LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; LOADEDMODULES="intel/2017.1.132:intel-mpi/2017.1.132:mkl/2017.1.132"; export LOADEDMODULES; MANPATH="/ihome/crc/install/intel/2017.1.132/man/en_US:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/man:/ihome/crc/install/intel/2017.1.132/man/common:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-ia/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-mic/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-igfx/man:/ihome/jkeith/kas389/anaconda/share/man:/ihome/jkeith/kas389/tex/2015/bin/x86_64-linux/man:/usr/local/share/man:/usr/share/man::"; export MANPATH; MKLROOT="/ihome/crc/install/intel/2017.1.132/mkl"; export MKLROOT; MKL_ROOT="/ihome/crc/install/intel/2017.1.132/mkl"; export MKL_ROOT; MODULEPATH="/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132:/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; NLSPATH="/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64/locale/en_US:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64/locale/%l_%t/%N:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin/locale/%l_%t/%N:/ihome/crc/install/intel/2017.1.132/debugger_2017/gdb/intel64_mic/share/locale/%l_%t/%N:/ihome/crc/install/intel/2017.1.132/debugger_2017/gdb/intel64/share/locale/%l_%t/%N"; export NLSPATH; _LMFILES_="/ihome/crc/modules/Core/intel/2017.1.132.lua:/ihome/crc/modules/Compiler/intel/2017.1.132/intel-mpi/2017.1.132.lua:/ihome/crc/modules/Core/mkl/2017.1.132.lua"; export _LMFILES_; _ModuleTable001_="X01vZHVsZVRhYmxlXz17WyJhY3RpdmVTaXplIl09MyxiYXNlTXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL0NvcmUiLH0sWyJjX3JlYnVpbGRUaW1lIl09ZmFsc2UsWyJjX3Nob3J0VGltZSJdPWZhbHNlLGZhbWlseT17fSxpbmFjdGl2ZT17fSxtVD17aW50ZWw9e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvcmUvaW50ZWwvMjAxNy4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTAsWyJmdWxsTmFtZSJdPSJpbnRlbC8yMDE3LjEuMTMyIixbImxvYWRPcmRlciJdPTEscHJvcFQ9e30sWyJzaG9ydCJdPSJpbnRlbCIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LFsiaW50ZWwtbXBpIl09e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvbXBpbGVyL2ludGVsLzIwMTcuMS4xMzIv"; export _ModuleTable001_; _ModuleTable002_="aW50ZWwtbXBpLzIwMTcuMS4xMzIubHVhIixbImRlZmF1bHQiXT0wLFsiZnVsbE5hbWUiXT0iaW50ZWwtbXBpLzIwMTcuMS4xMzIiLFsibG9hZE9yZGVyIl09Mixwcm9wVD17fSxbInNob3J0Il09ImludGVsLW1waSIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LG1rbD17WyJGTiJdPSIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZS9ta2wvMjAxNy4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTEsWyJmdWxsTmFtZSJdPSJta2wvMjAxNy4xLjEzMiIsWyJsb2FkT3JkZXIiXT0zLHByb3BUPXt9LFsic2hvcnQiXT0ibWtsIixbInN0YXR1cyJdPSJhY3RpdmUiLH0sfSxtcGF0aEE9eyIvaWhvbWUvY3JjL21vZHVsZXMvTVBJL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4xMzIiLCIv"; export _ModuleTable002_; _ModuleTable003_="aWhvbWUvY3JjL21vZHVsZXMvQ29tcGlsZXIvaW50ZWwvMjAxNy4xLjEzMiIsIi9paG9tZS9jcmMvbW9kdWxlcy9Db3JlIix9LFsic3lzdGVtQmFzZU1QQVRIIl09Ii9paG9tZS9jcmMvbW9kdWxlcy9Db3JlIixbInZlcnNpb24iXT0yLH0="; export _ModuleTable003_; _ModuleTable_Sz_="3"; export _ModuleTable_Sz_;
module load fftw
LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; MODULEPATH="/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132:/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; CMAKE_INCLUDE_PATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5/include:/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/include"; export CMAKE_INCLUDE_PATH; CMAKE_LIBRARY_PATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5/lib:/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/lib"; export CMAKE_LIBRARY_PATH; CMAKE_PREFIX_PATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5"; export CMAKE_PREFIX_PATH; CPATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5/include:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/ipp/include:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mkl/include:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/include:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/daal/include"; export CPATH; FFTWROOT="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5"; export FFTWROOT; INCLUDE_PATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5/include"; export INCLUDE_PATH; LD_LIBRARY_PATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5/lib:/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/mic/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/ipp/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64/gcc4.7:/ihome/crc/install/intel/2017.1.132/debugger_2017/iga/lib:/ihome/crc/install/intel/2017.1.132/debugger_2017/libipt/intel64/lib:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/daal/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64_lin/gcc4.4"; export LD_LIBRARY_PATH; LIBRARY_PATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5/lib:/ihome/crc/install/intel/2017.1.132/mkl/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/ipp/lib/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/compiler/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mkl/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64/gcc4.7:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/daal/lib/intel64_lin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/tbb/lib/intel64_lin/gcc4.4"; export LIBRARY_PATH; LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; LOADEDMODULES="intel/2017.1.132:intel-mpi/2017.1.132:mkl/2017.1.132:fftw/3.3.5"; export LOADEDMODULES; MANPATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/fftw/3.3.5/share/man:/ihome/crc/install/intel/2017.1.132/man/en_US:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/man:/ihome/crc/install/intel/2017.1.132/man/common:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-ia/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-mic/man:/ihome/crc/install/intel/2017.1.132/documentation_2017/en/debugger/gdb-igfx/man:/ihome/jkeith/kas389/anaconda/share/man:/ihome/jkeith/kas389/tex/2015/bin/x86_64-linux/man:/usr/local/share/man:/usr/share/man::"; export MANPATH; MODULEPATH="/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132:/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; _LMFILES_="/ihome/crc/modules/Core/intel/2017.1.132.lua:/ihome/crc/modules/Compiler/intel/2017.1.132/intel-mpi/2017.1.132.lua:/ihome/crc/modules/Core/mkl/2017.1.132.lua:/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132/fftw/3.3.5.lua"; export _LMFILES_; _ModuleTable001_="X01vZHVsZVRhYmxlXz17WyJhY3RpdmVTaXplIl09NCxiYXNlTXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL0NvcmUiLH0sWyJjX3JlYnVpbGRUaW1lIl09ZmFsc2UsWyJjX3Nob3J0VGltZSJdPWZhbHNlLGZhbWlseT17fSxpbmFjdGl2ZT17fSxtVD17ZmZ0dz17WyJGTiJdPSIvaWhvbWUvY3JjL21vZHVsZXMvTVBJL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4xMzIvZmZ0dy8zLjMuNS5sdWEiLFsiZGVmYXVsdCJdPTEsWyJmdWxsTmFtZSJdPSJmZnR3LzMuMy41IixbImxvYWRPcmRlciJdPTQscHJvcFQ9e30sWyJzaG9ydCJdPSJmZnR3IixbInN0YXR1cyJdPSJhY3RpdmUiLH0saW50ZWw9e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvcmUvaW50ZWwv"; export _ModuleTable001_; _ModuleTable002_="MjAxNy4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTAsWyJmdWxsTmFtZSJdPSJpbnRlbC8yMDE3LjEuMTMyIixbImxvYWRPcmRlciJdPTEscHJvcFQ9e30sWyJzaG9ydCJdPSJpbnRlbCIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LFsiaW50ZWwtbXBpIl09e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvbXBpbGVyL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4xMzIubHVhIixbImRlZmF1bHQiXT0wLFsiZnVsbE5hbWUiXT0iaW50ZWwtbXBpLzIwMTcuMS4xMzIiLFsibG9hZE9yZGVyIl09Mixwcm9wVD17fSxbInNob3J0Il09ImludGVsLW1waSIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LG1rbD17WyJGTiJdPSIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZS9ta2wvMjAx"; export _ModuleTable002_; _ModuleTable003_="Ny4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTEsWyJmdWxsTmFtZSJdPSJta2wvMjAxNy4xLjEzMiIsWyJsb2FkT3JkZXIiXT0zLHByb3BUPXt9LFsic2hvcnQiXT0ibWtsIixbInN0YXR1cyJdPSJhY3RpdmUiLH0sfSxtcGF0aEE9eyIvaWhvbWUvY3JjL21vZHVsZXMvTVBJL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4xMzIiLCIvaWhvbWUvY3JjL21vZHVsZXMvQ29tcGlsZXIvaW50ZWwvMjAxNy4xLjEzMiIsIi9paG9tZS9jcmMvbW9kdWxlcy9Db3JlIix9LFsic3lzdGVtQmFzZU1QQVRIIl09Ii9paG9tZS9jcmMvbW9kdWxlcy9Db3JlIixbInZlcnNpb24iXT0yLH0="; export _ModuleTable003_; _ModuleTable_Sz_="3"; export _ModuleTable_Sz_;
module load vasp/5.4.4
LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; MODULEPATH="/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132:/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; LMOD_DEFAULT_MODULEPATH="/ihome/crc/modules/Core"; export LMOD_DEFAULT_MODULEPATH; LOADEDMODULES="intel/2017.1.132:intel-mpi/2017.1.132:mkl/2017.1.132:fftw/3.3.5:vasp/5.4.4"; export LOADEDMODULES; MODULEPATH="/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132:/ihome/crc/modules/Compiler/intel/2017.1.132:/ihome/crc/modules/Core"; export MODULEPATH; PATH="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/vasp/5.4.4/bin:/ihome/crc/install/intel/2017.1.132/impi/2017.1.132/intel64/bin:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/bin/intel64:/ihome/crc/install/intel/2017.1.132/compilers_and_libraries_2017.1.132/linux/mpi/intel64/bin:/ihome/crc/install/intel/2017.1.132/debugger_2017/gdb/intel64_mic/bin:/ihome/sam/bmooreii/workspace/slurm-wrappers:/ihome/jkeith/kas389/python/kitchin-python/jasp/jasp/bin:/ihome/jkeith/kas389/anaconda/bin:/ihome/jkeith/kas389/tex/2015/bin/x86_64-linux:/ihome/sam/bmooreii/workspace/slurm-wrappers:/ihome/jkeith/kas389/jasp/jasp/bin:/ihome/jkeith/kas389/anaconda/bin:/ihome/jkeith/kas389/tex/2015/bin/x86_64-linux:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/ihome/crc/wrappers:/ihome/jkeith/kas389/python/gamess:/ihome/jkeith/kas389/python/vasp:/ihome/jkeith/kas389/python/alchemy:/ihome/jkeith/kas389/python/cpmd:/ihome/jkeith/kas389/python/tmol:/ihome/jkeith/kas389/python/reax:/ihome/jkeith/egottlie/karthi_scripts:/ihome/jkeith/kas389/python/subScripts:/ihome/jkeith/kas389/python/bader:/ihome/jkeith/kas389/python/cp2k:/ihome/jkeith/kas389/p4vasp/bin:/ihome/jkeith/kas389/bin:/ihome/jkeith/kas389/python/gamess:/ihome/jkeith/kas389/python/vasp:/ihome/jkeith/kas389/python/alchemy:/ihome/jkeith/kas389/python/cpmd:/ihome/jkeith/kas389/python/tmol:/ihome/jkeith/kas389/python/reax:/ihome/jkeith/egottlie/karthi_scripts:/ihome/jkeith/kas389/python/subScripts:/ihome/jkeith/kas389/python/bader:/ihome/jkeith/kas389/python/cp2k"; export PATH; VASP_ROOT="/ihome/crc/install/intel-2017.1.132/intel-mpi-2017.1.132/vasp/5.4.4"; export VASP_ROOT; _LMFILES_="/ihome/crc/modules/Core/intel/2017.1.132.lua:/ihome/crc/modules/Compiler/intel/2017.1.132/intel-mpi/2017.1.132.lua:/ihome/crc/modules/Core/mkl/2017.1.132.lua:/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132/fftw/3.3.5.lua:/ihome/crc/modules/MPI/intel/2017.1.132/intel-mpi/2017.1.132/vasp/5.4.4.lua"; export _LMFILES_; _ModuleTable001_="X01vZHVsZVRhYmxlXz17WyJhY3RpdmVTaXplIl09NSxiYXNlTXBhdGhBPXsiL2lob21lL2NyYy9tb2R1bGVzL0NvcmUiLH0sWyJjX3JlYnVpbGRUaW1lIl09ZmFsc2UsWyJjX3Nob3J0VGltZSJdPWZhbHNlLGZhbWlseT17fSxpbmFjdGl2ZT17fSxtVD17ZmZ0dz17WyJGTiJdPSIvaWhvbWUvY3JjL21vZHVsZXMvTVBJL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4xMzIvZmZ0dy8zLjMuNS5sdWEiLFsiZGVmYXVsdCJdPTEsWyJmdWxsTmFtZSJdPSJmZnR3LzMuMy41IixbImxvYWRPcmRlciJdPTQscHJvcFQ9e30sWyJzaG9ydCJdPSJmZnR3IixbInN0YXR1cyJdPSJhY3RpdmUiLH0saW50ZWw9e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvcmUvaW50ZWwv"; export _ModuleTable001_; _ModuleTable002_="MjAxNy4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTAsWyJmdWxsTmFtZSJdPSJpbnRlbC8yMDE3LjEuMTMyIixbImxvYWRPcmRlciJdPTEscHJvcFQ9e30sWyJzaG9ydCJdPSJpbnRlbCIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LFsiaW50ZWwtbXBpIl09e1siRk4iXT0iL2lob21lL2NyYy9tb2R1bGVzL0NvbXBpbGVyL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4xMzIubHVhIixbImRlZmF1bHQiXT0wLFsiZnVsbE5hbWUiXT0iaW50ZWwtbXBpLzIwMTcuMS4xMzIiLFsibG9hZE9yZGVyIl09Mixwcm9wVD17fSxbInNob3J0Il09ImludGVsLW1waSIsWyJzdGF0dXMiXT0iYWN0aXZlIix9LG1rbD17WyJGTiJdPSIvaWhvbWUvY3JjL21vZHVsZXMvQ29yZS9ta2wvMjAx"; export _ModuleTable002_; _ModuleTable003_="Ny4xLjEzMi5sdWEiLFsiZGVmYXVsdCJdPTEsWyJmdWxsTmFtZSJdPSJta2wvMjAxNy4xLjEzMiIsWyJsb2FkT3JkZXIiXT0zLHByb3BUPXt9LFsic2hvcnQiXT0ibWtsIixbInN0YXR1cyJdPSJhY3RpdmUiLH0sdmFzcD17WyJGTiJdPSIvaWhvbWUvY3JjL21vZHVsZXMvTVBJL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4xMzIvdmFzcC81LjQuNC5sdWEiLFsiZGVmYXVsdCJdPTAsWyJmdWxsTmFtZSJdPSJ2YXNwLzUuNC40IixbImxvYWRPcmRlciJdPTUscHJvcFQ9e30sWyJzaG9ydCJdPSJ2YXNwIixbInN0YXR1cyJdPSJhY3RpdmUiLH0sfSxtcGF0aEE9eyIvaWhvbWUvY3JjL21vZHVsZXMvTVBJL2ludGVsLzIwMTcuMS4xMzIvaW50ZWwtbXBpLzIwMTcuMS4x"; export _ModuleTable003_; _ModuleTable004_="MzIiLCIvaWhvbWUvY3JjL21vZHVsZXMvQ29tcGlsZXIvaW50ZWwvMjAxNy4xLjEzMiIsIi9paG9tZS9jcmMvbW9kdWxlcy9Db3JlIix9LFsic3lzdGVtQmFzZU1QQVRIIl09Ii9paG9tZS9jcmMvbW9kdWxlcy9Db3JlIixbInZlcnNpb24iXT0yLH0="; export _ModuleTable004_; _ModuleTable_Sz_="4"; export _ModuleTable_Sz_;

srun --mpi=pmi2 vasp_std  >& stdout.prod
